[{"path":"https://business-science.github.io/modeltime.h2o/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 BUSINESS SCIENCE Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"libraries","dir":"Articles","previous_headings":"","what":"Libraries","title":"Getting Started with Modeltime H2O","text":"Load following libraries:","code":"library(tidymodels) library(modeltime.h2o) library(tidyverse) library(timetk)"},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"collect-data-and-split-into-training-and-test-sets","dir":"Articles","previous_headings":"","what":"Collect data and split into training and test sets","title":"Getting Started with Modeltime H2O","text":"Next, load walmart_sales_weekly data containing 7 time series visualize using timetk::plot_time_series() function.  , separate data time_series_split() function generate training dataset test one.","code":"data_tbl <- walmart_sales_weekly %>%     select(id, Date, Weekly_Sales)  data_tbl %>%    group_by(id) %>%    plot_time_series(       .date_var    = Date,       .value       = Weekly_Sales,       .facet_ncol  = 2,       .smooth      = F,       .interactive = F   ) splits <- time_series_split(data_tbl, assess = \"3 month\", cumulative = TRUE)  recipe_spec <- recipe(Weekly_Sales ~ ., data = training(splits)) %>%     step_timeseries_signature(Date)   train_tbl <- training(splits) %>% bake(prep(recipe_spec), .) test_tbl  <- testing(splits) %>% bake(prep(recipe_spec), .)"},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"model-specification-training-and-prediction","dir":"Articles","previous_headings":"","what":"Model specification, training and prediction","title":"Getting Started with Modeltime H2O","text":"order correctly use modeltime.h2o, necessary connect H2O cluster h2o.init() function. can find information set cluster typing ?h2o.init visiting official site. Now comes fun part! define model specification automl_reg() function pass arguments engine: Next, let’s train model fit()! best models stored leaderbord default one best metric decided sort leaderbord selected (behavior can controlled sort_metric parameter passed set_engine. information see ?h2o.automl. default, sorted mean_residual_deviance). list models created training finally stored leaderbord can use automl_leaderbord function follows: change default selected model (remember, first one sorted according selected metric) can automl_update_model() function follows (run following example model id name changed randomness process): Finally, predict() test dataset:","code":"# Initialize H2O h2o.init(     nthreads = -1,     ip       = 'localhost',     port     = 54321 ) #>  #> H2O is not running yet, starting it now... #>  #> Note:  In case of errors look at the following log files: #>     /tmp/RtmpD7NvJJ/file217c797e529f/h2o_runner_started_from_r.out #>     /tmp/RtmpD7NvJJ/file217c77a3486f/h2o_runner_started_from_r.err #>  #>  #> Starting H2O JVM and connecting: .... Connection successful! #>  #> R is connected to the H2O cluster:  #>     H2O cluster uptime:         1 seconds 919 milliseconds  #>     H2O cluster timezone:       UTC  #>     H2O data parsing timezone:  UTC  #>     H2O cluster version:        3.42.0.2  #>     H2O cluster version age:    5 months and 10 days  #>     H2O cluster name:           H2O_started_from_R_runner_wle394  #>     H2O cluster total nodes:    1  #>     H2O cluster total memory:   3.90 GB  #>     H2O cluster total cores:    4  #>     H2O cluster allowed cores:  4  #>     H2O cluster healthy:        TRUE  #>     H2O Connection ip:          localhost  #>     H2O Connection port:        54321  #>     H2O Connection proxy:       NA  #>     H2O Internal Security:      FALSE  #>     R Version:                  R version 4.3.2 (2023-10-31)  # Optional - Set H2O No Progress to remove progress bars h2o.no_progress() model_spec <- automl_reg(mode = 'regression') %>%     set_engine(          engine                     = 'h2o',          max_runtime_secs           = 5,           max_runtime_secs_per_model = 3,          max_models                 = 3,          nfolds                     = 5,          exclude_algos              = c(\"DeepLearning\"),          verbosity                  = NULL,          seed                       = 786     )   model_spec #> H2O AutoML Model Specification (regression) #>  #> Engine-Specific Arguments: #>   max_runtime_secs = 5 #>   max_runtime_secs_per_model = 3 #>   max_models = 3 #>   nfolds = 5 #>   exclude_algos = c(\"DeepLearning\") #>   verbosity = NULL #>   seed = 786 #>  #> Computational engine: h2o model_fitted <- model_spec %>%     fit(Weekly_Sales ~ ., data = train_tbl) #>                                                  model_id      rmse        mse #> 1                      XGBoost_1_AutoML_1_20240104_204414  6368.842   40562143 #> 2 StackedEnsemble_BestOfFamily_1_AutoML_1_20240104_204414  6371.445   40595317 #> 3                          GBM_1_AutoML_1_20240104_204414  7607.165   57868955 #> 4                          GLM_1_AutoML_1_20240104_204414 36255.636 1314471115 #>         mae     rmsle mean_residual_deviance #> 1  4175.752 0.1753395               40562143 #> 2  4107.600 0.1690209               40595317 #> 3  5125.090 0.2115567               57868955 #> 4 31032.413 0.8352711             1314471115 #>  #> [4 rows x 6 columns]  model_fitted #> parsnip model object #>  #>  #> H2O AutoML - Xgboost #> -------- #> Model: Model Details: #> ============== #>  #> H2ORegressionModel: xgboost #> Model ID:  XGBoost_1_AutoML_1_20240104_204414  #> Model Summary:  #>   number_of_trees #> 1              44 #>  #>  #> H2ORegressionMetrics: xgboost #> ** Reported on training data. ** #>  #> MSE:  8905205 #> RMSE:  2984.159 #> MAE:  2011.225 #> RMSLE:  0.09321704 #> Mean Residual Deviance :  8905205 #>  #>  #>  #> H2ORegressionMetrics: xgboost #> ** Reported on cross-validation data. ** #> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) ** #>  #> MSE:  40562143 #> RMSE:  6368.842 #> MAE:  4175.752 #> RMSLE:  0.1753395 #> Mean Residual Deviance :  40562143 #>  #>  #> Cross-Validation Metrics Summary:  #>                                   mean              sd      cv_1_valid #> mae                        4175.762000      272.333200     3890.696000 #> mean_residual_deviance 40559876.000000 11151054.000000 28802630.000000 #> mse                    40559876.000000 11151054.000000 28802630.000000 #> r2                            0.969156        0.008390        0.977998 #> residual_deviance      40559876.000000 11151054.000000 28802630.000000 #> rmse                       6320.693400      872.290200     5366.808000 #> rmsle                         0.174745        0.016217        0.153008 #>                             cv_2_valid      cv_3_valid      cv_4_valid #> mae                        4450.958500     4100.722700     4473.589400 #> mean_residual_deviance 54395072.000000 37792108.000000 49844588.000000 #> mse                    54395072.000000 37792108.000000 49844588.000000 #> r2                            0.958720        0.971498        0.962121 #> residual_deviance      54395072.000000 37792108.000000 49844588.000000 #> rmse                       7375.302000     6147.529000     7060.070000 #> rmsle                         0.189853        0.171167        0.191813 #>                             cv_5_valid #> mae                        3962.845000 #> mean_residual_deviance 31964988.000000 #> mse                    31964988.000000 #> r2                            0.975442 #> residual_deviance      31964988.000000 #> rmse                       5653.759000 #> rmsle                         0.167883 automl_leaderboard(model_fitted) #> # A tibble: 4 × 6 #>   model_id                       rmse    mse    mae rmsle mean_residual_deviance #>   <chr>                         <dbl>  <dbl>  <dbl> <dbl>                  <dbl> #> 1 XGBoost_1_AutoML_1_20240104…  6369. 4.06e7  4176. 0.175              40562143. #> 2 StackedEnsemble_BestOfFamil…  6371. 4.06e7  4108. 0.169              40595317. #> 3 GBM_1_AutoML_1_20240104_204…  7607. 5.79e7  5125. 0.212              57868955. #> 4 GLM_1_AutoML_1_20240104_204… 36256. 1.31e9 31032. 0.835            1314471115. automl_update_model(model_fitted, model_id = \"StackedEnsemble_AllModels_AutoML_20210319_204825\") predict(model_fitted, test_tbl) #> # A tibble: 84 × 1 #>      .pred #>      <dbl> #>  1  19484. #>  2  33369. #>  3  37997. #>  4  40721. #>  5  70083. #>  6  81469. #>  7 136557. #>  8  14242. #>  9  34078. #> 10  35966. #> # ℹ 74 more rows"},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"modeltime-workflow","dir":"Articles","previous_headings":"","what":"Modeltime Workflow","title":"Getting Started with Modeltime H2O","text":"fitted model, can follow Modeltime Workflow: Add fitted models Model Table. Calibrate models testing set. Perform Testing Set Forecast Evaluation & Accuracy Evaluation. Refit models Full Dataset & Forecast Forward","code":""},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"add-fitted-models-to-a-model-table","dir":"Articles","previous_headings":"","what":"Add fitted models to a Model Table","title":"Getting Started with Modeltime H2O","text":"First, create model table:","code":"modeltime_tbl <- modeltime_table(     model_fitted )   modeltime_tbl #> # Modeltime Table #> # A tibble: 1 × 3 #>   .model_id .model   .model_desc          #>       <int> <list>   <chr>                #> 1         1 <fit[+]> H2O AUTOML - XGBOOST"},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"calibrate-testing-set-forecast-accuracy-evaluation","dir":"Articles","previous_headings":"","what":"Calibrate & Testing Set Forecast & Accuracy Evaluation","title":"Getting Started with Modeltime H2O","text":"Next, calibrate testing set visualize forecasts:","code":"modeltime_tbl %>%   modeltime_calibrate(test_tbl) %>%     modeltime_forecast(         new_data    = test_tbl,         actual_data = data_tbl,         keep_data   = TRUE     ) %>%     group_by(id) %>%     plot_modeltime_forecast(         .facet_ncol = 2,          .interactive = FALSE     )"},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"refit-to-full-dataset-forecast-forward","dir":"Articles","previous_headings":"","what":"Refit to Full Dataset & Forecast Forward","title":"Getting Started with Modeltime H2O","text":"using refit dataset, let’s prepare data. create data_prepared_tbl represents complete dataset (union train test) variables created recipe named recipe_spec. Subsequently, create dataset future_prepared_tbl represents dataset future data one year required variables. Finally, use forecast future dataset visualize results reffited.  can likely better train longer really good quick example!","code":"data_prepared_tbl <- bind_rows(train_tbl, test_tbl)  future_tbl <- data_prepared_tbl %>%     group_by(id) %>%     future_frame(.length_out = \"1 year\") %>%     ungroup()  future_prepared_tbl <- bake(prep(recipe_spec), future_tbl) refit_tbl <- modeltime_tbl %>%     modeltime_refit(data_prepared_tbl) #>                                                  model_id      rmse        mse #> 1                      XGBoost_1_AutoML_2_20240104_204427  6060.518   36729882 #> 2 StackedEnsemble_BestOfFamily_1_AutoML_2_20240104_204427  6061.512   36741927 #> 3                          GBM_1_AutoML_2_20240104_204427  7524.808   56622738 #> 4                          GLM_1_AutoML_2_20240104_204427 36259.518 1314752625 #>         mae     rmsle mean_residual_deviance #> 1  4075.988 0.1677377               36729882 #> 2  3998.426 0.1604279               36741927 #> 3  5163.899 0.2088567               56622738 #> 4 31017.107 0.8289850             1314752625 #>  #> [4 rows x 6 columns]  refit_tbl %>%     modeltime_forecast(         new_data    = future_prepared_tbl,         actual_data = data_prepared_tbl,         keep_data   = TRUE     ) %>%     group_by(id) %>%     plot_modeltime_forecast(         .facet_ncol  = 2,         .interactive = FALSE     )"},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"saving-and-loading-models","dir":"Articles","previous_headings":"","what":"Saving and Loading Models","title":"Getting Started with Modeltime H2O","text":"H2O models need “serialized” (fancy word saved directory contains recipe recreating models). save models, use save_h2o_model(). Provide directory want save model. saves model file directory. can reload model R using load_h2o_model().","code":"model_fitted %>%    save_h2o_model(path = \"../model_fitted\", overwrite = TRUE) model_h2o <- load_h2o_model(path = \"../model_fitted/\")"},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"shut-down-h2o-when-finished","dir":"Articles","previous_headings":"","what":"Shut down H2O when finished","title":"Getting Started with Modeltime H2O","text":"Finally, saved specific models want keep, shutdown H2O cluster. Need learn high-performance time series forecasting?","code":"h2o.shutdown(prompt = FALSE)"},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"take-the-high-performance-forecasting-course","dir":"Articles","previous_headings":"","what":"Take the High-Performance Forecasting Course","title":"Getting Started with Modeltime H2O","text":"Become forecasting expert organization  High-Performance Time Series Course","code":""},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"time-series-is-changing","dir":"Articles","previous_headings":"Take the High-Performance Forecasting Course","what":"Time Series is Changing","title":"Getting Started with Modeltime H2O","text":"Time series changing. Businesses now need 10,000+ time series forecasts every day. call High-Performance Time Series Forecasting System (HPTSF) - Accurate, Robust, Scalable Forecasting. High-Performance Forecasting Systems save companies improving accuracy scalability. Imagine happen career can provide organization “High-Performance Time Series Forecasting System” (HPTSF System).","code":""},{"path":"https://business-science.github.io/modeltime.h2o/articles/getting-started.html","id":"how-to-learn-high-performance-time-series-forecasting","dir":"Articles","previous_headings":"Take the High-Performance Forecasting Course","what":"How to Learn High-Performance Time Series Forecasting","title":"Getting Started with Modeltime H2O","text":"teach build HPTFS System High-Performance Time Series Forecasting Course. learn: Time Series Machine Learning (cutting-edge) Modeltime - 30+ Models (Prophet, ARIMA, XGBoost, Random Forest, & many ) Deep Learning GluonTS (Competition Winners) Time Series Preprocessing, Noise Reduction, & Anomaly Detection Feature engineering using lagged variables & external regressors Hyperparameter Tuning Time series cross-validation Ensembling Multiple Machine Learning & Univariate Modeling Techniques (Competition Winner) Scalable Forecasting - Forecast 1000+ time series parallel . Become Time Series Expert organization. Take High-Performance Time Series Forecasting Course","code":""},{"path":"https://business-science.github.io/modeltime.h2o/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matt Dancho. Author, maintainer. Business Science. Copyright holder.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dancho M (2024). modeltime.h2o: Modeltime 'H2O' Machine Learning. R package version 0.1.2.9000, https://github.com/business-science/modeltime.h2o.","code":"@Manual{,   title = {modeltime.h2o: Modeltime 'H2O' Machine Learning},   author = {Matt Dancho},   year = {2024},   note = {R package version 0.1.2.9000},   url = {https://github.com/business-science/modeltime.h2o}, }"},{"path":"https://business-science.github.io/modeltime.h2o/index.html","id":"modeltimeh2o-","dir":"","previous_headings":"","what":"Modeltime H2O Machine Learning","title":"Modeltime H2O Machine Learning","text":"Forecasting H2O AutoML Modeltime H2O provides H2O backend Modeltime Forecasting Ecosystem. main algorithm H2O AutoML, automatic machine learning library built speed scale.","code":"# Install Development Version devtools::install_github(\"business-science/modeltime.h2o\")"},{"path":"https://business-science.github.io/modeltime.h2o/index.html","id":"whats-possible","dir":"","previous_headings":"","what":"What’s possible","title":"Modeltime H2O Machine Learning","text":"Modeltime Ecosystem, ’s easy forecast scale. forecast created H2O AutoML. Try Getting Started Modeltime H2O.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/index.html","id":"meet-the-modeltime-ecosystem","dir":"","previous_headings":"","what":"Meet the modeltime ecosystem","title":"Modeltime H2O Machine Learning","text":"Learn growing ecosystem forecasting packages modeltime ecosystem growing Modeltime part growing ecosystem Modeltime forecasting packages. Modeltime (Machine Learning) Modeltime H2O (AutoML) Modeltime GluonTS (Deep Learning) Modeltime Ensemble (Blending Forecasts) Modeltime Resample (Backtesting) Timetk (Feature Engineering, Data Wrangling, Time Series Visualization)","code":""},{"path":"https://business-science.github.io/modeltime.h2o/index.html","id":"take-the-high-performance-forecasting-course","dir":"","previous_headings":"","what":"Take the High-Performance Forecasting Course","title":"Modeltime H2O Machine Learning","text":"Become forecasting expert organization  High-Performance Time Series Course","code":""},{"path":"https://business-science.github.io/modeltime.h2o/index.html","id":"time-series-is-changing","dir":"","previous_headings":"Take the High-Performance Forecasting Course","what":"Time Series is Changing","title":"Modeltime H2O Machine Learning","text":"Time series changing. Businesses now need 10,000+ time series forecasts every day. call High-Performance Time Series Forecasting System (HPTSF) - Accurate, Robust, Scalable Forecasting. High-Performance Forecasting Systems save companies improving accuracy scalability. Imagine happen career can provide organization “High-Performance Time Series Forecasting System” (HPTSF System).","code":""},{"path":"https://business-science.github.io/modeltime.h2o/index.html","id":"how-to-learn-high-performance-time-series-forecasting","dir":"","previous_headings":"Take the High-Performance Forecasting Course","what":"How to Learn High-Performance Time Series Forecasting","title":"Modeltime H2O Machine Learning","text":"teach build HPTFS System High-Performance Time Series Forecasting Course. learn: Time Series Machine Learning (cutting-edge) Modeltime - 30+ Models (Prophet, ARIMA, XGBoost, Random Forest, & many ) Deep Learning GluonTS (Competition Winners) Time Series Preprocessing, Noise Reduction, & Anomaly Detection Feature engineering using lagged variables & external regressors Hyperparameter Tuning Time series cross-validation Ensembling Multiple Machine Learning & Univariate Modeling Techniques (Competition Winner) Scalable Forecasting - Forecast 1000+ time series parallel . Become Time Series Expert organization. Take High-Performance Time Series Forecasting Course","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_fit_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"H2O AutoML Modeling Function (Bridge) — automl_fit_impl","title":"H2O AutoML Modeling Function (Bridge) — automl_fit_impl","text":"H2O AutoML Modeling Function (Bridge)","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_fit_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"H2O AutoML Modeling Function (Bridge) — automl_fit_impl","text":"","code":"automl_fit_impl(x, y, ...)"},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_fit_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"H2O AutoML Modeling Function (Bridge) — automl_fit_impl","text":"x dataframe xreg (exogenous regressors) y numeric vector values fit ... Additional arguments passed h2o.automl().","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_fit_impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"H2O AutoML Modeling Function (Bridge) — automl_fit_impl","text":"fitted model class automl_fit_impl modeltime_bridge.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_leaderboard.html","id":null,"dir":"Reference","previous_headings":"","what":"H2O AutoML Leaderboard Utilities — automl_leaderboard","title":"H2O AutoML Leaderboard Utilities — automl_leaderboard","text":"H2O AutoML Leaderboard lists models created automl_reg() training process. training process automatically uses top model. available models can shown automl_leaderboard() model change model used using automl_update_model().","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_leaderboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"H2O AutoML Leaderboard Utilities — automl_leaderboard","text":"","code":"automl_leaderboard(object)  automl_update_model(object, model_id)"},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_leaderboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"H2O AutoML Leaderboard Utilities — automl_leaderboard","text":"object object created automl_reg() trained (fitted). model_id H2O Model ID (shown AutoML Leaderboard). Alternatively, user can provide H2O model.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_leaderboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"H2O AutoML Leaderboard Utilities — automl_leaderboard","text":"automl_leaderboard(): tibble containing H2O AutoML Leaderboard automl_update_model(): updated parnsip workflow H2O Model updated","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_leaderboard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"H2O AutoML Leaderboard Utilities — automl_leaderboard","text":"","code":"if (FALSE) { library(tidymodels) library(modeltime.h2o) library(h2o) library(tidyverse) library(timetk)  h2o.init(     nthreads = -1,     ip       = 'localhost',     port     = 54321 )  # Model Spec model_spec <- automl_reg(mode = 'regression') %>%     set_engine(         engine                     = 'h2o',         max_runtime_secs           = 5,          max_runtime_secs_per_model = 4,         nfolds                     = 5,         max_models                 = 3,         exclude_algos              = c(\"DeepLearning\"),         seed                       = 786     )    # Fit AutoML model_fit <- model_spec %>%     fit(value ~ ., data = training(m750_splits))  # Inspect the Leaderboard leaderboard_tbl <- automl_leaderboard(model_fit) leaderboard_tbl  # Swap an H2O Model Out (Using the 2nd model from the leaderboard) model_id_2  <- leaderboard_tbl$model_id[[2]] model_fit_2 <- automl_update_model(model_fit, model_id_2) model_fit_2  # Shutdown H2O when Finished.  # Make sure to save any work before.  h2o.shutdown(prompt = FALSE)           }"},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_predict_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Bridge prediction Function for H2O AutoML Models — automl_predict_impl","title":"Bridge prediction Function for H2O AutoML Models — automl_predict_impl","text":"Bridge prediction Function H2O AutoML Models","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_predict_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bridge prediction Function for H2O AutoML Models — automl_predict_impl","text":"","code":"automl_predict_impl(object, new_data, ...)"},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_predict_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bridge prediction Function for H2O AutoML Models — automl_predict_impl","text":"object object class model_fit. new_data rectangular data object, data frame. ... Additional arguments passed h2o::h2o.predict()","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_predict_impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bridge prediction Function for H2O AutoML Models — automl_predict_impl","text":"vector values (predictions) class numeric.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"General Interface for H2O AutoML Time Series Models — automl_reg","title":"General Interface for H2O AutoML Time Series Models — automl_reg","text":"automl_reg() way generate specification AutoML model fitting allows model created using different packages. Currently package h2o.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General Interface for H2O AutoML Time Series Models — automl_reg","text":"","code":"automl_reg(mode = \"regression\")"},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General Interface for H2O AutoML Time Series Models — automl_reg","text":"mode single character string type model. possible value model \"regression\".","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General Interface for H2O AutoML Time Series Models — automl_reg","text":"updated model specification classes automl_reg model_spec.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General Interface for H2O AutoML Time Series Models — automl_reg","text":"options arguments can set using set_engine(). model can created using fit() function using following engines: H2O \"h2o\" (default)","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_reg.html","id":"engine","dir":"Reference","previous_headings":"","what":"Engine","title":"General Interface for H2O AutoML Time Series Models — automl_reg","text":"h2o engine uses h2o.automl().","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_reg.html","id":"fit-details","dir":"Reference","previous_headings":"","what":"Fit Details","title":"General Interface for H2O AutoML Time Series Models — automl_reg","text":"following features REQUIRED available incoming data fitting process. Fit: fit(y ~ ., data): Includes target feature function \"date\" feature. Predict: predict(model, new_data) new_data contains column named \"date\". Date Date-Time Variable requirement date date-time variable predictor. fit() interface accepts date date-time features handles internally.","code":""},{"path":[]},{"path":"https://business-science.github.io/modeltime.h2o/reference/automl_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General Interface for H2O AutoML Time Series Models — automl_reg","text":"","code":"if (FALSE) { library(tidymodels) library(modeltime.h2o) library(h2o) library(tidyverse) library(timetk)  data_tbl <- walmart_sales_weekly %>%     select(id, Date, Weekly_Sales)              splits <- time_series_split(     data_tbl,      assess     = \"3 month\",      cumulative = TRUE )  recipe_spec <- recipe(Weekly_Sales ~ ., data = training(splits)) %>%     step_timeseries_signature(Date)  train_tbl <- bake(prep(recipe_spec), training(splits)) test_tbl  <- bake(prep(recipe_spec), testing(splits))  # Initialize H2O  h2o.init(     nthreads = -1,     ip = 'localhost',     port = 54321 )              # ---- MODEL SPEC ---- model_spec <- automl_reg(mode = 'regression') %>%     set_engine(         engine                     = 'h2o',         max_runtime_secs           = 30,          max_runtime_secs_per_model = 30,         project_name               = 'project_01',         nfolds                     = 5,         max_models                 = 1000,         exclude_algos              = c(\"DeepLearning\"),         seed                       =  786     )   model_spec  # ---- TRAINING ---- # Important: Make sure the date is included as regressor.  # This training process should take 30-40 seconds model_fitted <- model_spec %>%     fit(Weekly_Sales ~ ., data = train_tbl)  model_fitted  # ---- PREDICT ---- # - IMPORTANT: New Data must have date feature  predict(model_fitted, test_tbl)  # Shutdown H2O when Finished.  # Make sure to save any work before.  h2o.shutdown(prompt = FALSE) }"},{"path":"https://business-science.github.io/modeltime.h2o/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://business-science.github.io/modeltime.h2o/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/save_h2o_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Saving and Loading Modeltime H2O Models — save_h2o_model","title":"Saving and Loading Modeltime H2O Models — save_h2o_model","text":"H2O AutoML models require special storage process saves / loads recipe used recreate model / directory user defines.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/save_h2o_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saving and Loading Modeltime H2O Models — save_h2o_model","text":"","code":"save_h2o_model(object, path, overwrite = FALSE)  load_h2o_model(path)"},{"path":"https://business-science.github.io/modeltime.h2o/reference/save_h2o_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saving and Loading Modeltime H2O Models — save_h2o_model","text":"object fitted model object path directory store H2O AutoML model files overwrite Whether allow overwriting H2O AutoML model's directory. Default: FALSE.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/save_h2o_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saving and Loading Modeltime H2O Models — save_h2o_model","text":"save_h2o_model(): return value, called side effects (composes directory model files) load_h2o_model(): return value, called side effects (reads directory model files)","code":""},{"path":"https://business-science.github.io/modeltime.h2o/reference/save_h2o_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saving and Loading Modeltime H2O Models — save_h2o_model","text":"","code":"if (FALSE) { library(tidymodels) library(tidyverse) library(timetk) library(modeltime.h2o)  h2o.init()  model_fit <- automl_reg(mode = 'regression') %>%     set_engine(         engine                     = 'h2o',         max_runtime_secs           = 30,          max_runtime_secs_per_model = 30,         project_name               = 'project_01',         nfolds                     = 5,         max_models                 = 1000,         exclude_algos              = c(\"DeepLearning\"),         seed                       =  786     ) %>%     fit(value ~ date + id, m750)  # Saves the related files needed to recreate the model model_fit %>% save_h2o_model(path = \"/dir_h2o_automl_model/\")  # Loads the model load_h2o_model(path = \"/dir_h2o_automl_model/\")  # Shutdown H2O when Finished.  # Make sure to save any work before.  h2o.shutdown(prompt = FALSE)  }"},{"path":"https://business-science.github.io/modeltime.h2o/news/index.html","id":"modeltimeh2o-012","dir":"Changelog","previous_headings":"","what":"modeltime.h2o 0.1.2","title":"modeltime.h2o 0.1.2","text":"Get back CRAN (timetk archival)","code":""},{"path":"https://business-science.github.io/modeltime.h2o/news/index.html","id":"modeltimeh2o-011","dir":"Changelog","previous_headings":"","what":"modeltime.h2o 0.1.1","title":"modeltime.h2o 0.1.1","text":"CRAN release: 2021-04-05","code":""},{"path":"https://business-science.github.io/modeltime.h2o/news/index.html","id":"new-functions-0-1-1","dir":"Changelog","previous_headings":"","what":"New Functions","title":"modeltime.h2o 0.1.1","text":"automl_leaderboard(): Returns AutoML Leaderboard AutoML run model created. automl_update_model(): Makes easy swap models AutoML Leaderboard.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/news/index.html","id":"fix-cran-issue-0-1-1","dir":"Changelog","previous_headings":"","what":"Fix CRAN issue","title":"modeltime.h2o 0.1.1","text":"Moved h2o.init() skip CRAN per H2O recommendation. original issue related libxgboost4j_gpu*.left user system user’s temp library. corrected H2O.","code":""},{"path":"https://business-science.github.io/modeltime.h2o/news/index.html","id":"modeltimeh2o-010","dir":"Changelog","previous_headings":"","what":"modeltime.h2o 0.1.0","title":"modeltime.h2o 0.1.0","text":"CRAN release: 2021-03-17 initial release key functions: automl_reg(): Uses H2O AutoML backend forecasting. save_h2o_model() load_h2o_model(): Saving loading H2O models Workflow/Parsnip objects","code":""}]
